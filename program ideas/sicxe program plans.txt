
Define a string to be a block of memory consisting of a length word L followed by L bytes representing characters.
Thus, the total length of this block shall be 3 + L bytes.
Hereafter a "string" refers to an instance of this structure, unless noted otherwise.

A program to parse an integer out of a text string encoding its base-ten representation.

	Preconditions
We assume A contains the address of the string.
We assume L contains the address of our call site.

	Postconditions
A contains the return value.
S contains the error code. The caller should check this code before using the return value: If the error code is not zero, the return value should not be used.
If S is 0, there was no error and the return value represents the expected parse of the input string.
If S is 1, the string was in an unexpected format.
If S is 2, the string was too long, or the number it represented was too large to fit in a word.
If S is any other value, an unspecified error occurred.

	Uses Registers A, S, T, X

start

negsgn	BYTE	c'-'
isneg	WORD	0	. nonzero value indicates the number is negative.
str		RESW	1
zero	BYTE	c'0'
ans		RESW	1
strIdx	RESW	1

pow10c	WORD	7
pow10	WORD	1
		WORD	10
		WORD	100
		WORD	1000
		WORD	10000
		WORD	100000
		WORD	1000000
		WORD	10000000	. 10^7

go		STA		str	 . store string pointer
		LDA		@str

		. check string length is at least 1
		COMP	#1
		JLT		errfmt
		J		skerr1
errfmt	LDS		#1
		RSUB
		
skerr1	RMO A,T	. T stores the length of the string (first word at str)

		
		LDA		#0
		STA		isneg	. clear negative flag
		STA		ans		. clear answer

		. check if string starts with negative sign
		LDCH	str
		COMP	negsgn
		JNE		nonneg
		LDA		#1
		STA		isneg	. mark number as negative.

nonneg	CLEAR	X
loop	CLEAR	A
		LDCH	str,X
		SUB		zero	. convert char to digit value
		
		. check digit is in range [0, 9]
		COMP	#0
		JLT		errfmt
		COMP	#9
		JGT		errfmt

		. compute the place value of this digit.
		STX		strIdx	. backup strIdx

		RMO		A,S		. backup digit A into S
		LDA		pow10c	. number of powers of ten
		SUBR	X
		RMO		A,X		. pow10Idx = 7 - strIdx

		. make sure result is in range [0, pow10c]
		COMP	#0
		JLT		errlen

		RMO		S,A		. restore A

		. multiply by place value and add to answer.
		MUL		pow10,X
		ADD		ans
		STA		ans

		LDX		strIdx	. restore strIdx
		
		TIXR	T
		JLT		loop	. loop while we have more characters

		. check if we need to make the result negative
		LDA		isneg
		COMP	#0
		JNE		negate
		LDA		ans
		
		. we finished successfully.
done	LDS		#0
		RSUB
		
negate	MUL		#-1
		J		done
	
errlen	LDS		#2
		RSUB

		end		go