
Here's how I propose a graphics device should work:

When the hypervisor creates a graphics device, it specifies a region of memory that will be used as the frame buffer.
It also specifies the pixel format.
It also specifies the length and width of the frame buffer, measured in pixels.
With respect to these parameters, the graphics device will read pixel data in row-major order and display it to a window or file in the hypervisor context.

In addition to the above, the graphics device shall expose the following functionality to SIC/XE programs through I/O.

A command to refresh the display, i.e. to render the content of the FB.
A command to set the memory region to be used as the FB.
A command to set the length and width of the FB in pixels.
A command to set the pixel format.

A command to toggle use of a color pallet.
A command to set the contents of the color pallet.

A command to fill with a specified color.
A command to draw text.

A command to draw a bitmap at a specified location.
A command to draw a bitmap at a specified location, scale, and rotation.
A command to draw a bitmap at a specified location using a specified mask.
A command to draw a bitmap at a specified location, scale, and rotation using a specified mask.

All "draw" and "fill" operations may be done on the frame buffer or an any other specified rectangular region.

In general, this is what we mean by a 'mask':
A mask's pixel format is either 1 bpp or 8 bpp grayscale.
A mask has the same number of pixels as the bitmap it's applied to.

In general, this is what we mean by a 'bitmap':
A bitmap has a pixel format.
A bitmap has a length and a width.
A bitmap's pixel data is stored in memory as a contiguous region in row-major order.